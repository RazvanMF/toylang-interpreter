	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int a
		a = 1
		int b
		b = 2
		int c
		c = 5
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		a = 1
		int b
		b = 2
		int c
		c = 5
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int b
		b = 2
		int c
		c = 5
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		b = 2
		int c
		c = 5
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int c
		c = 5
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		c = 5
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		switch((a * 10)) {(case (b * c) : (print(a); print(b))), (case 10 : (print(100); print(200)))}
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(print(a); print(b))
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(a)
		print(b)
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(b)
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 5

		----------[OUTPUT LOG]----------
		1

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(300)

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 5

		----------[OUTPUT LOG]----------
		1
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		a -> 1
		b -> 2
		c -> 5

		----------[OUTPUT LOG]----------
		1
		2
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 100
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		10
		200
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		2 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 2
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 300
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 300
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 300
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		v = 2
		print(v)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = 2
		print(v)

		----------[SYMBOL TABLE]----------
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)

		----------[SYMBOL TABLE]----------
		v -> 2

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2

		----------[OUTPUT LOG]----------
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
		5 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 199
		5 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		6 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 10 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 300
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 300
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 300
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Declare: sum(a, b) {(int v; (v = (a + b); print(v)))}
		Declare: prod(a, b) {(int v; (v = (a * b); print(v)))}
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Declare: prod(a, b) {(int v; (v = (a * b); print(v)))}
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a + b); print(v)))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a + b); print(v))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(v = (a + b); print(v))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = (a + b)
		print(v)
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 25

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 25

		----------[OUTPUT LOG]----------
		25

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		call sum(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a + b); print(v)))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a + b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a * b); print(v)))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		(v = (a + b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a * b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		v = (a + b)
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		(v = (a * b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 7

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		v = (a * b)
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 7

		----------[OUTPUT LOG]----------
		25
		2
		7

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 10

		----------[OUTPUT LOG]----------
		25
		2
		7

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 10

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		Reference(int) a
		v = 10
		Allocate to heap variable a, with value 22
		Fork the following: (Write to heap at a the value 30; (v = 32; (print(v); print(Read from heap at a))))
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) a
		v = 10
		Allocate to heap variable a, with value 22
		Fork the following: (Write to heap at a the value 30; (v = 32; (print(v); print(Read from heap at a))))
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = 10
		Allocate to heap variable a, with value 22
		Fork the following: (Write to heap at a the value 30; (v = 32; (print(v); print(Read from heap at a))))
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 0 -> int
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable a, with value 22
		Fork the following: (Write to heap at a the value 30; (v = 32; (print(v); print(Read from heap at a))))
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 0 -> int
		v -> 10

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at a the value 30; (v = 32; (print(v); print(Read from heap at a))))
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 10

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 22
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 10

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 22
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at a the value 30
		v = 32
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 10

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 22
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 10

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		v = 32
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 10

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 10

		----------[OUTPUT LOG]----------
		10
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(v)
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 32

		----------[OUTPUT LOG]----------
		10
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at a)

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 32

		----------[OUTPUT LOG]----------
		10
		30
		32

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		a -> Address 13 -> int
		v -> 32

		----------[OUTPUT LOG]----------
		10
		30
		32
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		13 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 2
		2 -> 3
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int
		v3 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 300
		3 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 100
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 8 -> int

		----------[OUTPUT LOG]----------
		10
		200
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		8 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 20
		10 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 200
		10 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 9 -> int
		v2 -> Address 10 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		9 -> 199
		10 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Declare: sum(a, b) {(int v; (v = (a + b); print(v)))}
		Declare: prod(a, b) {(int v; (v = (a * b); print(v)))}
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Declare: prod(a, b) {(int v; (v = (a * b); print(v)))}
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a + b); print(v)))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a + b); print(v))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(v = (a + b); print(v))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = (a + b)
		print(v)
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 25

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 25

		----------[OUTPUT LOG]----------
		25

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		call sum(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a + b); print(v)))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a + b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a * b); print(v)))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		(v = (a + b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a * b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		v = (a + b)
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		(v = (a * b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 7

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		v = (a * b)
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 7

		----------[OUTPUT LOG]----------
		25
		2
		7

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 10

		----------[OUTPUT LOG]----------
		25
		2
		7

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 10

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Declare: sum(a, b) {(int v; (v = (a + b); print(v)))}
		Declare: prod(a, b) {(int v; (v = (a * b); print(v)))}
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Declare: prod(a, b) {(int v; (v = (a * b); print(v)))}
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = 2
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int w
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		w = 5
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		call sum((v * 10), w)
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a + b); print(v)))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a + b); print(v))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		(v = (a + b); print(v))
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		v = (a + b)
		print(v)
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 25

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		return
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		a -> 20
		b -> 5
		v -> 25

		----------[OUTPUT LOG]----------
		25

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(v)
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: call sum(v, w)
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		call sum(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a + b); print(v)))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		call prod(v, w)

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a + b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		(int v; (v = (a * b); print(v)))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		(v = (a + b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		int v
		(v = (a * b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		v = (a + b)
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		(v = (a * b); print(v))
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 7

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		v = (a * b)
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 0

		----------[OUTPUT LOG]----------
		25
		2

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 7

		----------[OUTPUT LOG]----------
		25
		2
		7

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(v)
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 10

		----------[OUTPUT LOG]----------
		25
		2
		7

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		return

		----------[SYMBOL TABLE]----------
		a -> 2
		b -> 5
		v -> 10

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		v -> 2
		w -> 5

		----------[OUTPUT LOG]----------
		25
		2
		7
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 300
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		305

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 305
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 100
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10
		200
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 4 -> int

		----------[OUTPUT LOG]----------
		10
		200
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 200
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 1
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Semaphore in variable (cnt), that can handle Read from heap at v1 threads
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); Release Semaphore defined in (cnt))))
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Acquire semaphore defined in (cnt); (Write to heap at v1 the value (Read from heap at v1 * 10); (Write to heap at v1 the value (Read from heap at v1 * 2); (print(Read from heap at v1); Release Semaphore defined in (cnt)))))
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 1
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print((Read from heap at v1 - 1))
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Acquire semaphore defined in (cnt)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 10
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 2)
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 100
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Release Semaphore defined in (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 3 -> int

		----------[OUTPUT LOG]----------
		10
		9
		200

		----------[FILE TABLE]----------

		----------[HEAP]----------
		3 -> 200
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 2
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 3
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 4 -> int
		v2 -> Address 5 -> int
		v3 -> Address 6 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 0
		30
		Program State ID 2 invoked countdown of Latch 0
		40
		Program State ID 3 invoked countdown of Latch 0
		100
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		4 -> 20
		5 -> 30
		6 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create barrier in (cnt), with capacity = Read from heap at v2
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v1 the value (Read from heap at v1 * 10); print(Read from heap at v1)))
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Wait at barrier (cnt) until the required number of threads arrive; (Write to heap at v2 the value (Read from heap at v2 * 10); (Write to heap at v2 the value (Read from heap at v2 * 10); print(Read from heap at v2))))
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Wait at barrier (cnt) until the required number of threads arrive
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 2
		8 -> 3
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		4

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 30
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 300
		9 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		4
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 300
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 7 -> int
		v2 -> Address 8 -> int
		v3 -> Address 9 -> int

		----------[OUTPUT LOG]----------
		4
		20
		300

		----------[FILE TABLE]----------

		----------[HEAP]----------
		7 -> 20
		8 -> 300
		9 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v3
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int cnt
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 2
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 3
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 10 -> int
		v2 -> Address 0 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v3, with value 4
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Latch in (cnt), which expects Read from heap at v2 threads
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 0
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v1 the value (Read from heap at v1 * 10); (print(Read from heap at v1); (Countdown on Latch (cnt); Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))))))))
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 2
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v2 the value (Read from heap at v2 * 10); (print(Read from heap at v2); (Countdown on Latch (cnt); Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt))))))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 3
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Write to heap at v3 the value (Read from heap at v3 * 10); (print(Read from heap at v3); Countdown on Latch (cnt)))

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v3 the value (Read from heap at v3 * 10)
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 4
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v3)
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Wait on latch (cnt)
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40
		Program State ID 3 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40
		Program State ID 3 invoked countdown of Latch 1

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Countdown on Latch (cnt)
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40
		Program State ID 3 invoked countdown of Latch 1
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(100)

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40
		Program State ID 3 invoked countdown of Latch 1
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		cnt -> 1
		v1 -> Address 10 -> int
		v2 -> Address 11 -> int
		v3 -> Address 12 -> int

		----------[OUTPUT LOG]----------
		20
		Program State ID 1 invoked countdown of Latch 1
		30
		Program State ID 2 invoked countdown of Latch 1
		40
		Program State ID 3 invoked countdown of Latch 1
		100
		100

		----------[FILE TABLE]----------

		----------[HEAP]----------
		10 -> 20
		11 -> 30
		12 -> 40
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v1
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Reference(int) v2
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int x
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		int q
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v1, with value 20
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 0 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Allocate to heap variable v2, with value 30
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 0 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (x)
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x))); (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 * 10); Unlock Mutex (x))))
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Create Mutex (q)
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (x); (Write to heap at v1 the value (Read from heap at v1 - 1); Unlock Mutex (x)))
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q))); (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 * 10); Unlock Mutex (q))))
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(4)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 * 10)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Fork the following: (Lock Mutex (q); (Write to heap at v2 the value (Read from heap at v2 + 5); Unlock Mutex (q)))
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 20
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(3)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 1]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 1]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(2)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 + 5)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 30
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(1)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v1 the value (Read from heap at v1 - 1)
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 200
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 4]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 4]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		sleep(0)
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 2]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 0
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 2]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (x)
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Write to heap at v2 the value (Read from heap at v2 * 10)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 35
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v1)
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 3]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 3]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (x)
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Lock Mutex (q)
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		print(Read from heap at v2)
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------
		Unlock Mutex (q)

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

	//////////[START EXECUTION ON THREAD 0]//////////
		----------[EXECUTION STACK]----------

		----------[SYMBOL TABLE]----------
		q -> 1
		x -> 0
		v1 -> Address 1 -> int
		v2 -> Address 2 -> int

		----------[OUTPUT LOG]----------
		199
		350

		----------[FILE TABLE]----------

		----------[HEAP]----------
		1 -> 199
		2 -> 350
	//////////[END EXECUTION ON THREAD 0]//////////

